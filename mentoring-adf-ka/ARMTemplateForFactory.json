{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-ka"
		},
		"LS_ABLB_AK_2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ABLB_AK_2'"
		},
		"LS_ABLB_ONLINE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ABLB_ONLINE'"
		},
		"LS_ADLS_AK_2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_ADLS_AK_2'"
		},
		"LS_ABLB_AK_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "SAS1"
		},
		"LS_ADLS_AK_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakeka.dfs.core.windows.net"
		},
		"LS_ADLS_AK_2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakeka.dfs.core.windows.net/"
		},
		"LS_AKV_AK_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-ka.vault.azure.net/"
		},
		"LS_ASQL_AK_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "EtlUserAzureFull"
		},
		"LS_ASQL_DATAMART_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "EtlUserAzureFullDataMart"
		},
		"LS_SS_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "SSUser"
		},
		"trigger1_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/bb994079-71ea-46e2-b2b1-53b535ef74ab/resourceGroups/azure-mentoring-ak/providers/Microsoft.Storage/storageAccounts/azurementoringstorageakn"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Archive_Processed_Files-json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Archive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_ONLINE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_ONLINE_archive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DeleteArchived",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_ONLINE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startTime": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-30T11:13:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_ONLINE')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_ONLINE_archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archive_Processed_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBLOBFileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_AK_LIST",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "EachFileToArchive",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetBLOBFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetBLOBFileNames').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToArchive",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLS_AK",
											"type": "DatasetReference",
											"parameters": {
												"OutputFileName": {
													"value": "@concat(substring(item().Name, 0, lastIndexOf(item().Name, '.')), '_',pipeline().parameters.startTime, '.csv')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_AK_archive",
											"type": "DatasetReference",
											"parameters": {
												"OutputFileName": {
													"value": "@concat(substring(item().Name, 0, lastIndexOf(item().Name, '.')), '_',pipeline().parameters.startTime, '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteArchived",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyToArchive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ADLS_AK",
											"type": "DatasetReference",
											"parameters": {
												"OutputFileName": {
													"value": "@concat(substring(item().Name, 0, lastIndexOf(item().Name, '.')), '_',pipeline().parameters.startTime, '.csv')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startTime": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-12T10:39:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_AK_LIST')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_AK')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_AK_archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_to_Lake-json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BlobToLake",
						"description": "Blob to Lake files. Online",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterkMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@convertTimeZone(activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue, 'Central Asia Standard Time', 'UTC')",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": null,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ABLB_ONLINE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_ONLINE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT [WatermarkValue], [TableName]\n  FROM [CinemaTickets].[dbo].[watermarktable] where TableName = 'online'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SS",
								"type": "DatasetReference",
								"parameters": {
									"InputTableName": "watermarktable"
								}
							}
						}
					},
					{
						"name": "GetFileList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_ONLINE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "LookupNewWaterkMark",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetFileMetadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_ABLB_ONLINE_PAR",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().Name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "If greater than max",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetFileMetadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(ticks(activity('GetFileMetadata').output.lastModified), ticks(formatDateTime(variables('NewWaterMarkValue'))))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SetNewWaterMarkValue",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "NewWaterMarkValue",
													"value": {
														"value": "@activity('GetFileMetadata').output.lastModified",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "WriteWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "BlobToLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@formatDateTime(variables('NewWaterMarkValue'))",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('LookupOldWaterMarkActivity').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"NewWaterMarkValue": {
						"type": "String",
						"defaultValue": "2010-01-01T09:00:00Z"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-30T11:28:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_ONLINE')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_ONLINE')]",
				"[concat(variables('factoryId'), '/datasets/DS_SS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_ONLINE_PAR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_to_Lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBLOBFileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_AK_LIST",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "EachFileBlobToLake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetBLOBFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetBLOBFileNames').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "BLOB To Lake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS_AK",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ABLB_AK",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_AK",
											"type": "DatasetReference",
											"parameters": {
												"OutputFileName": {
													"value": "@concat(substring(item().Name, 0, lastIndexOf(item().Name, '.')), '_',pipeline().parameters.startTime, '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"startTime": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-12T10:39:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_AK_LIST')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_AK')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_AK')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_to_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EachFileBLOBToSQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "TruncateSTG_SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetBLOBFileNames').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "BLOB to SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": {
														"value": "@item().Name",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ABLB_AK",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_AK",
											"type": "DatasetReference",
											"parameters": {
												"OutpuTableName": {
													"value": "@if(contains(item().Name, 'ratings_part'), 'ratings', substring(item().Name, 0, lastIndexOf(item().Name, '.')))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LookupSPNames",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "EachFileBLOBToSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT SPName\n  FROM [dbo].[SPList]\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_AK",
								"type": "DatasetReference",
								"parameters": {
									"OutpuTableName": "test"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "EachSP",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupSPNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupSPNames').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SQL to 3NF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().SPName",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_AK",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetBLOBFileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_AK_LIST",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "TruncateSTG_SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetBLOBFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetBLOBFileNames').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "truncate",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LS_ASQL_AK",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "TRUNCATE TABLE [stg].[@{if(contains(item().Name, 'ratings_part'), 'ratings', substring(item().Name, 0, lastIndexOf(item().Name, '.')))}]",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-12T10:39:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_AK')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_AK_LIST')]",
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_AK')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lake-json_to_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSPNames",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lake-json to SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT SPName FROM [dbo].[SPList] where id > 11 order by Id",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_AK",
								"type": "DatasetReference",
								"parameters": {
									"OutpuTableName": "test"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "EachSP",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupSPNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupSPNames').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SQL to 3NF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().SPName",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_AK",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Truncate",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_ASQL_AK",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE [stg].[online_purchase]"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Lake-json to SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_ONLINE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_AK",
								"type": "DatasetReference",
								"parameters": {
									"OutpuTableName": "online_purchase"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-30T11:51:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_AK')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_ONLINE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Logic App')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetURL",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://mentoring-key-vault-ka.vault.azure.net/secrets/LogicAppURL/3def9e13bd844a49ba6fa517f8f28597?api-version=7.0",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\"}\"\n   }",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": {
									"value": "https://vault.azure.net",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SendEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetURL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@activity('GetURL').output.value",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\"}\"\n   }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-26T07:34:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PopulateDataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PopulateDim",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DBO_DIM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMovies": {},
									"tMovieStatus": {},
									"tOnlineService": {},
									"dimMovies": {},
									"DimOnlineService": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PopulateFact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PopulateDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_DBO_FACT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchase": {},
									"dimOnlineService": {},
									"DimMovies": {},
									"tOnlineService": {},
									"tMovies": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-24T12:06:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_DBO_DIM')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/dataflows/DF_DBO_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLS_to_Blob_incremintal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SS",
								"type": "DatasetReference",
								"parameters": {
									"InputTableName": "watermarktable"
								}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select max(transaction_date) as NewWatermarkvalue from [dbo].[Tickets]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SS",
								"type": "DatasetReference",
								"parameters": {
									"InputTableName": "ignore"
								}
							}
						}
					},
					{
						"name": "IncrementalCopy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncateStgArea",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[Tickets] where transaction_date > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and transaction_date <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SS",
								"type": "DatasetReference",
								"parameters": {
									"InputTableName": "Tickets"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_AK",
								"type": "DatasetReference",
								"parameters": {
									"OutpuTableName": "cinema_tickets"
								}
							}
						]
					},
					{
						"name": "TruncateStgArea",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_ASQL_AK",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "TRUNCATE TABLE [stg].[cinema_tickets]",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LookupSPNames",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "WriteWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT SPName\n  FROM [dbo].[SPList]\nwhere id >= 10 order by id ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_AK",
								"type": "DatasetReference",
								"parameters": {
									"OutpuTableName": "test"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "EachSP",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupSPNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupSPNames').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SQL to 3NF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().SPName",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_AK",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "WriteWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "IncrementalCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-30T10:32:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SS')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_AK')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/git2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "1",
							"errorCode": "599"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/git4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "123",
							"errorCode": "123"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/low_cost_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fail",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "Amir",
							"errorCode": "777"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-14T09:46:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/master_pipeline-json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lake to SQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BLOB to Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lake-json_to_SQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archive processed files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Lake to SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Archive_Processed_Files-json",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"startTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BLOB to Lake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Blob_to_Lake-json",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-30T11:51:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lake-json_to_SQL')]",
				"[concat(variables('factoryId'), '/pipelines/Archive_Processed_Files-json')]",
				"[concat(variables('factoryId'), '/pipelines/Blob_to_Lake-json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BLOB to Lake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Blob_to_Lake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"startTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BLOB to SQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BLOB to Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Blob_to_SQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archive processed files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BLOB to SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Archive_Processed_Files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"startTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-12T10:47:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Blob_to_Lake')]",
				"[concat(variables('factoryId'), '/pipelines/Blob_to_SQL')]",
				"[concat(variables('factoryId'), '/pipelines/Archive_Processed_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/metadata_driven')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Source",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Truncate",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LS_ASQL_AK",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@{concat('truncate table', ' ', item().dst_schema_name, '.',item().dst_table_name)}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Truncate_Error",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Truncate",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertErrorLog]",
										"storedProcedureParameters": {
											"ActivityName": {
												"value": "Truncate",
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Truncate').output.errors[0].Code",
													"type": "Expression"
												},
												"type": "String"
											},
											"Failure": {
												"value": {
													"value": "@activity('Truncate').output.errors[0].Data.FailureInitiator ",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Truncate').output.errors[0].Message ",
													"type": "Expression"
												},
												"type": "String"
											},
											"Date_Time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_AK",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Get Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM etl.tControlMetadata",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_AK",
								"type": "DatasetReference",
								"parameters": {
									"OutpuTableName": "test"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Source Load",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "For Each Source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(item().mapping).translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLS_MetaDriven",
											"type": "DatasetReference",
											"parameters": {
												"src_column_delimiter": {
													"value": "@item().src_column_delimiter",
													"type": "Expression"
												},
												"src_escape_character": {
													"value": "@item().src_escape_character",
													"type": "Expression"
												},
												"src_quote_character": {
													"value": "@item().src_quote_character",
													"type": "Expression"
												},
												"src_file_name": {
													"value": "@item().src_file_name",
													"type": "Expression"
												},
												"src_folder": {
													"value": "@item().src_folder",
													"type": "Expression"
												},
												"src_container": {
													"value": "@item().src_container",
													"type": "Expression"
												},
												"src_encoding": {
													"value": "@item().src_encoding",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_MetaDriven",
											"type": "DatasetReference",
											"parameters": {
												"dst_table_name": {
													"value": "@item().dst_table_name",
													"type": "Expression"
												},
												"dst_schema_name": {
													"value": "@item().dst_schema_name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertCopyDataLog]",
										"storedProcedureParameters": {
											"ActivityName": {
												"value": "Load",
												"type": "String"
											},
											"BillingDuration": {
												"value": {
													"value": "@{activity('Load').output.billingReference.totalBillableDuration[0].duration} ",
													"type": "Expression"
												},
												"type": "Double"
											},
											"CopyDuration": {
												"value": {
													"value": "@activity('Load').output.copyDuration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"EndTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"MeterType": {
												"value": {
													"value": "@activity('Load').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"ParallelCopies": {
												"value": {
													"value": "@activity('Load').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProcessedFilesCount": {
												"value": {
													"value": "@activity('Load').output.filesRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"QueueDuration": {
												"value": {
													"value": "@{activity('Load').output.executionDetails[0].profile.queue.duration}",
													"type": "Expression"
												},
												"type": "Double"
											},
											"ReadRowCount": {
												"value": {
													"value": "@activity('Load').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StartTime": {
												"value": {
													"value": "@{activity('Load').output.executionDetails[0].start}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Status": {
												"value": {
													"value": "@{activity('Load').output.executionDetails[0].status}",
													"type": "Expression"
												},
												"type": "String"
											},
											"TransferDuration": {
												"value": {
													"value": "@{activity('Load').output.executionDetails[0].profile.transfer.duration}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"UsedDIU": {
												"value": {
													"value": "@activity('Load').output.usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"WrittenRowCount": {
												"value": {
													"value": "@activity('Load').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_AK",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Load_Error",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Load",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertErrorLog]",
										"storedProcedureParameters": {
											"ActivityName": {
												"value": "Load",
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Load').output.errors[0].Code",
													"type": "Expression"
												},
												"type": "String"
											},
											"Failure": {
												"value": {
													"value": "@activity('Load').output.errors[0].Data.FailureInitiator ",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Load').output.errors[0].Message ",
													"type": "Expression"
												},
												"type": "String"
											},
											"Date_Time": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_AK",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Get_Data_Error",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[InsertErrorLog]",
							"storedProcedureParameters": {
								"ActivityName": {
									"value": "Get Data",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('Get Data').output.errors[0].Code",
										"type": "Expression"
									},
									"type": "String"
								},
								"Failure": {
									"value": {
										"value": "@activity('Get Data').output.errors[0].Data.FailureInitiator ",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@activity('Get Data').output.errors[0].Message ",
										"type": "Expression"
									},
									"type": "String"
								},
								"Date_Time": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "Datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_AK",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"startTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-08T07:58:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_AK')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_MetaDriven')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_MetaDriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_AK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_AK",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_AK_2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_AK_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ratings"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_AK_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_AK_LIST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_AK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_ONLINE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_ONLINE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_ONLINE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_ONLINE_PAR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_ONLINE",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "online"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_ONLINE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_AK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_AK",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OutputFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().OutputFileName",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_AK_2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_AK_2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "ratings"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_AK_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_AK_archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_AK",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OutputFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().OutputFileName",
							"type": "Expression"
						},
						"folderPath": "movies/archive",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_MetaDriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_AK",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"src_column_delimiter": {
						"type": "String"
					},
					"src_escape_character": {
						"type": "String"
					},
					"src_quote_character": {
						"type": "String"
					},
					"src_file_name": {
						"type": "String"
					},
					"src_folder": {
						"type": "String"
					},
					"src_container": {
						"type": "String"
					},
					"src_encoding": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().src_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().src_folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().src_container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().src_column_delimiter",
						"type": "Expression"
					},
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_ONLINE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_AK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_ONLINE_archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_AK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archive",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_AK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_AK",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OutpuTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": {
						"value": "@dataset().OutpuTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_ControlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_AK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "src_container",
						"type": "nvarchar"
					},
					{
						"name": "src_folder",
						"type": "nvarchar"
					},
					{
						"name": "src_file_name",
						"type": "nvarchar"
					},
					{
						"name": "src_column_delimiter",
						"type": "nvarchar"
					},
					{
						"name": "src_encoding",
						"type": "nvarchar"
					},
					{
						"name": "src_escape_character",
						"type": "nvarchar"
					},
					{
						"name": "src_quote_character",
						"type": "nvarchar"
					},
					{
						"name": "dst_schema_name",
						"type": "nvarchar"
					},
					{
						"name": "dst_table_name",
						"type": "nvarchar"
					},
					{
						"name": "diu_value",
						"type": "nvarchar"
					},
					{
						"name": "mapping",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "etl",
					"table": "tControlMetadata_2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DimMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DATAMART",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DATAMART')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DATAMART",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DATAMART')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_FactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DATAMART",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DATAMART')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_FactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DATAMART",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DATAMART')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_MetaDriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_AK",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dst_table_name": {
						"type": "String"
					},
					"dst_schema_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().dst_schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().dst_table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_tMovieStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "For module 8",
				"linkedServiceName": {
					"referenceName": "LS_ASQL_AK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovieStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_tMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "For module 8",
				"linkedServiceName": {
					"referenceName": "LS_ASQL_AK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_tOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "For module 8",
				"linkedServiceName": {
					"referenceName": "LS_ASQL_AK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_tOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "For module 8",
				"linkedServiceName": {
					"referenceName": "LS_ASQL_AK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().InputTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_AK')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_AK",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ABLB_AK_properties_typeProperties_sasUri_secretName')]",
						"secretVersion": "639a866c1eaa4ca3b3c009f13faa0c69"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_AK_2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_ABLB_AK_2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_ONLINE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_ABLB_ONLINE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS_AK')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_AK_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS_AK_2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_AK_2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_ADLS_AK_2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AzureEastAustraliaIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AzureEastAustraliaIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AKV_AK')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AKV_AK_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_AK')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_AK",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ASQL_AK_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_DATAMART')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_AK",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ASQL_DATAMART_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV_AK",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_SS_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "ir-ak",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ir-ak')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV_AK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scheduled_daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SQLS_to_Blob_incremintal",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-20T16:17:00",
						"timeZone": "Central Asia Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SQLS_to_Blob_incremintal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/movies/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trigger1_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger2')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-10-23T18:16:00",
						"timeZone": "Central Asia Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureEastAustraliaIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ir-ak')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DBO_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_tMovieStatus",
								"type": "DatasetReference"
							},
							"name": "tMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_DimMovies",
								"type": "DatasetReference"
							},
							"name": "dimMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "JOIN"
						},
						{
							"name": "DateAndTime"
						},
						{
							"name": "DateAndTime2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovieStatus",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"tMovies, tMovieStatus join(tMovies@MovieStatusId == tMovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JOIN",
						"JOIN derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> DateAndTime",
						"tOnlineService derive(CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> DateAndTime2",
						"DateAndTime sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> dimMovies",
						"DateAndTime2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_tMovieStatus')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DimMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DimOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DBO_FACT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "dimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DimMovies",
								"type": "DatasetReference"
							},
							"name": "DimMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "GetServiceCode"
						},
						{
							"name": "GetServiceKey"
						},
						{
							"name": "GetMovieIdNK"
						},
						{
							"name": "GetMovieKey"
						},
						{
							"name": "DateKey"
						},
						{
							"name": "MonthKey"
						},
						{
							"name": "aggregate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovies",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"tOnlinePurchase, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetServiceCode",
						"GetServiceCode, dimOnlineService join(tOnlineService@ServiceCode == dimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetServiceKey",
						"GetServiceKey, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetMovieIdNK",
						"GetMovieIdNK, DimMovies join(tMovies@MovieIdNK == DimMovies@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetMovieKey",
						"GetMovieKey derive(DateKey = toInteger(substring(toString(TransactionDate), 1, 4) + substring(toString(TransactionDate), 6, 2) + substring(toString(TransactionDate), 9, 2))) ~> DateKey",
						"GetMovieKey derive(MonthKey = toInteger(substring(toString(TransactionDate), 1, 4) + substring(toString(TransactionDate), 6, 2))) ~> MonthKey",
						"MonthKey aggregate(groupBy(MonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(Id)) ~> aggregate",
						"DateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase",
						"aggregate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DimMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_FactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_FactOnlinePurchase_MonthlySnapshot')]"
			]
		}
	]
}